#+TITLE: The Little Typer
#+AUTHOR: Adrian
#+STARTUP: overview

I'm starting to learn Racket for formal reasoning and for this purpose,
I will be studying /The Little Typer/ book, which describes the language
[[https://github.com/the-little-typer/pie][Pie]]. As such, I will be adding here some theoretical notes which I will
expand in my dissertation and also some source code blocks.

* References
- Friedman, Christiansen -- /The Little Typer/, 2018

* Meta
You can export code blocks as in the example below by pressing
~C-c C-v t~ to export (tangle) *all* code blocks in current buffer.
To tangle only the block under cursor, press ~C-u C-c C-v t~ or use
a numeric prefix to affect only that number of blocks.

#+BEGIN_SRC racket :tangle ../rkt/swap.rkt :exports code
  ;; Use the Pie module
  ;; (after installing with `raco pkg install pie'
  #lang pie

  ;; a simple example, the swap function
  (define swap
	(lambda (p)
	  (elim-Pair
	   Nat Atom
	   (Pair Atom Nat)
	   p
	   (lambda (a d)
		 (cons d a)))))
#+END_SRC

* 1: The More Things Change, the More They Stay the Same
By Martin-Lof, /a judgment is an attitude that a person takes/
/towards expressions. When we come to know something, we are/
/making a judgment/. A _form of judgment_ is an observation
with blank spaces in it, such as:

#+BEGIN_EXAMPLE
_________________ is a ___________________.    <--- judgment
________ is the same _______ as __________.    <--- judgment
_______________ is a type.                     <--- judgment
______ and _______ are the same type.		   <--- judgment
#+END_EXAMPLE

** Claims before Definitions
Using ~define~ to associate a name with an expression requires
that the expression's type has previously been associated with
the name using ~claim~.

#+BEGIN_SRC racket :tangle ../rkt/claim-define.rkt :exports code
  #lang pie

  ;; doesn't work in Pie
  (define one
	(add1 zero))

  ;; this works
  (claim one Nat)         ; declare the type first
  (define one
	(add1 zero))

  (claim four Nat)
  (define four
	(add1
	 (add1
	  (add1
	   (add1 zero)))))
#+END_SRC

An expression with a constructor at the top is called a *value*.
For example, the constructors of ~Nat~ are ~zero~ and ~add1~, while
the constructor of ~Pair~ is ~cons~.

Note that not every value is in normal form. This is because the
arguments to a constructor need not be normal. Each expression has only
one normal form, but it is sometimes possible to write it as a value in
more than one way.

#+BEGIN_SRC racket :tangle ../rkt/values-normal.rkt :exports code
  #lang pie

  (add1
   (+ (add1 zero)
	  (add1
	   (add1 zero))))
  ;; is a value, but it is NOT normal
  ;; because the arguments are not in normal form

  ;; To make it normal, we only have to use normalized expressions.
  (claim one Nat)
  (claim two Nat)
  (define one (add1 zero))
  (define two (add1 (add1 zero)))
  (+ one two)             ; normal value
#+END_SRC

*Keywords:* atom, type, type constructor
*Examples (respectively):* ='dog, Nat, Pair=.

* 2: Doin' What Comes Naturally
*Constructors* build values and *eliminators* take apart values
built by constructors. In the context of what we've met so far,
=Pair= is a constructor and =car= and =cdr= are eliminators.

Also, =lambda= is a /constructor/, which constructs functions.
Its corresponding /eliminator/ is the function application.
The /type constructor/ for =lambdas= is =->=, so for example,
=(-> Atom (Pair Atom Atom))= is the type of a lambda that takes
an atom and produces a pair of two atoms, such as:
#+BEGIN_SRC racket
  (lambda 'dog
	(cons 'dog 'cat))
#+END_SRC

*Initial Law of Application*:
#+BEGIN_QUOTE
If f is an (-> Y X) and arg is an Y, then (f arg) is an X.
#+END_QUOTE

*Initial First Commandment of Lambda*:
#+BEGIN_QUOTE
Two lambda-expressions that expect the same number of arguments
are the same if their bodies are the same after consistently renaming
their variables (alpha-conversion).
#+END_QUOTE

*Initial Second Commandment of Lambda*:
#+BEGIN_QUOTE
If f is an (-> Y X), then f is the same as (lambda (y) (f y)),
as long as y does not occur in f.
#+END_QUOTE

*Neutral expressions* are not values and cannot yet be evaluated
due to a variable. For example:
#+BEGIN_QUOTE
If x is a (Pair Nat Atom), then (cdr x) is a neutral value.
Without knowing the value of x, there is no way to find the
value of (cdr x).
#+END_QUOTE

** =which-Nat=
A =which-Nat= expression has 3 arguments: =target=, =base= and =step=:
#+BEGIN_SRC racket
  #lang pie

  (which-Nat target
			 base
			 step)
#+END_SRC
- It checks whether =target= is zero:
  + If so, the value returned is the value of =base=;
  + Otherwise, if =target= is some =(add1 n)=, then the value
	of the expression is the value of =(step n)=.
Examples:
#+BEGIN_SRC racket :tangle ../rkt/which-nat.rkt :export code
  #lang pie

  (which-Nat zero
			 'naught
			 (lambda (n)
			   'more))            ;; => 'naught
  (which-Nat 4
			 'naught
			 (lambda (n)
			   'more))            ;; => 'more
  ;; 4 is another way of writing (add1 3)
  ;; so it returns ((lambda (n) 'more) 3),
  ;; which is 'more.

  (which-Nat 5
			 0
			 (lambda (n)
			   (+ 6 n)))          ;; => 10
  ;; 5 is (add1 4), so it returns
  ;; ((lambda (n) (+ 6 n)) 4) = 10.
#+END_SRC

** Example: Custom Type with Constructor and Eliminator
#+BEGIN_SRC racket :tangle ../rkt/pear-type.rkt :export code
  #lang pie

  (claim Pear U)                  ; the Pear type
  (define Pear                    ; is a Pair of two Nats
	(Pair Nat Nat))

  (claim Pear-maker U)            ; universe
  (define Pear-maker              ; two Nats make a Pear
	(-> Nat Nat Pear))

  (claim elim-Pear
		 (-> Pear Pear-maker Pear))
  (define elim-Pear               ; eliminator consumes the maker
	(lambda (pear maker)
	  (maker (car pear) (cdr pear))))

  ;; sum must be defined
  (claim step+
		 (-> Nat Nat))
  (define step+
	(lambda (+n-1)
	  (add1 +n-1)))

  (claim + (-> Nat Nat Nat))
  (define +
	(lambda (n j)
	  (iter-Nat n
				j
				step+)))

  (claim pearwise+                ; Addition for Pear types
		 (-> Pear Pear Pear))
  (define pearwise+
	(lambda (x y)
	  (elim-Pear x                ; split the two parts into
				 (lambda (a1 d1)  ; their parts (remember, Pair = (Nat, Nat))
				   (elim-Pear y
							  (lambda (a2 d2)
								(cons
								 (+ a1 a2)        ; then add the parts
								 (+ d1 d2))))))))
#+END_SRC

* 3: A Forkful of Pie
A =the=-expression associates an expression with its type:
#+BEGIN_SRC racket
  #lang pie
  (the (Pair Atom Atom)                   ; what follows has this type
	   (cons 'spinach 'cauliflower))

  (the (Pair Atom                     
			 (Pair Atom Atom))            ; what follows has this type
	   (cons 'spinach
			 (cons 'kale 'cauliflower)))
#+END_SRC

*Remark:* The value of =(the X e)= is =e=, with type =X=.
In the case of the universe =U=, it is basically =(the U U)=.

* 3: Eliminate All Natural Numbers
*In Pie, all functions are total.*

** =iter-Nat=
An =iter-Nat= expression looks like this:
#+BEGIN_SRC racket
  (iter-Nat target
			base
			step)
#+END_SRC
When =target= is zero, the value of the expression is
the value of =base=. However, when =target= is =(add1 n)=,
the value of the expression is the value of:
#+BEGIN_SRC racket
  (step
   (iter-Nat n
			 base
			 step))
#+END_SRC
So each =add1= in the value of =target= is replaced by a =step=
and the zero is replaced by =base=.
Example:
#+BEGIN_SRC racket :tangle ../rkt/iter-Nat.rkt :exports code
  #lang pie

  (iter-Nat 5
			3
			(lambda (k)
			  (add1 k)))          ;; => 8
  ;; target = 5
  ;; base = 3
  ;; step = (lambda (k) (add1 k))
  ;; so basically applies add1 5 times to 3
#+END_SRC

Using =iter-Nat=, we can define addition for natural numbers:
#+BEGIN_SRC racket :tangle ../rkt/plus-iter.rkt :exports code
  #lang pie

  (claim +                    ; addition of naturals
		 (-> Nat Nat
			 Nat))
  (claim step+                ; inductive step for definition
		 (-> Nat Nat))
  (define step+               ; inductive step addition (n-1) -> n
	(lambda (+n-1)
	  (add1 +n-1)))
  (define +
	(lambda (n j)             ; sum of n and j
	  (iter-Nat n             ; target
				j             ; base
				step+)))      ; step
#+END_SRC

** =rec-Nat=
The general syntax of =rec-Nat= is similar to that for =iter-Nat= and
=which-Nat=, in that it uses a =target=, a =base= and a =step=.
But it works this way:
- if the =target= is zero, the value of the expression is the =base=;
- if the =target= is not zero, the =target= shrinks by removing an
  =add1= each time. The =base= and =step= do not change.

Example:
#+BEGIN_SRC racket :tangle ../rkt/rec-Nat.rkt :exports code
  #lang pie

  (rec-Nat (add1 zero)
		   0
		   (lambda (n-1 almost)
			 (add1
			  (add1 almost))))
  ;; is the same as
  ((lambda (n-1 almost)
	 (add1
	  (add1 almost)))
   zero
   (rec-Nat zero
			0
			(lambda (n-1 almost)
			  (add1
			   (add1 almost)))))
  ;; which is further
  (add1
   (add1
	(rec-Nat zero
			 0
			 (lambda (n-1 almost)
			   (add1
				(add1 almost))))))
  ;; then further
  (add1
   (add1 0))      ;; => 2
#+END_SRC

A further example is to use =rec-Nat= to check whether a =Nat=
is zero:
#+BEGIN_SRC racket :tangle ../rkt/zerop-rec.rkt :exports code
  #lang pie

  (claim step-zerop           ; the inductive step for
		 (-> Nat Atom         ; checking nullity
			 Atom))
  (define step-zerop
	(lambda (n-1 zerop-n-1)
	  'nil))                  ; nothing

  (claim zerop                ; the actual check
		 (-> Nat
			 Atom))
  (define zerop
	(lambda (n)
	  (rec-Nat n
			   't             ; true
			   step-zerop)))

  ;; REMARK: `zerop' is actually `zero?' in Scheme.
#+END_SRC

Next, the Gauss sum.
#+BEGIN_SRC racket :tangle ../rkt/gauss-sum.rkt :exports code
  #lang pie

  (require plus-iter)             ; uses the definition of plus

  (claim step-gauss               ; inductive step
		 (-> Nat Nat
			 Nat))
  (define step-gauss
	(lambda (n-1 gauss-n-1)
	  (+ (add1 (n-1) gauss-n-1))))

  (claim gauss                    ; Gauss formula for sum of n integers
		 (-> Nat Nat))
  (define gauss
	(lambda (n)
	  (rec-Nat n
			   0
			   step-gauss)))
#+END_SRC

Lastly, multiplication:
#+BEGIN_SRC racket :tangle ../rkt/mult.rkt :exports code
  #lang pie

  (require plus-iter)         ; we need the definition of +

  (claim mult                    ; multiplication of naturals
		 (-> Nat Nat
			 Nat))
  (claim step-mult               ; inductive step
		 (-> Nat Nat Nat
			 Nat))

  (define step-mult
	(lambda (j n-1 mult-n-1)
	  (+ j mult-n-1)))

  (define mult
	(lambda (n j)
	  (rec-Nat n
			   0
			   (step-mult j))))
#+END_SRC

* 4: Easy as Pie
** =Pair= eliminators
We can define an eliminator for =Pair=, regardless of
the types in =Pair=. That is, we will define an eliminator that
will expose any of =A= or =D= in =(Pair A D)=, regardless of
the types that =A= or =D= represent.

#+BEGIN_SRC racket :tangle ../rkt/elim-Pair.rkt :exports code
  #lang pie

  ;; elim-Pair will operate on PRODUCT TYPES (see theory in the notes)
  (claim elim-Pair
		 (Pi ((A U)
			  (D U)
			  (X U))
			 (-> (Pair A D)
				 (-> A D
					 X)
				 X)))
  (define elim-Pair
	(lambda (A D X)
	  (lambda (p f)
		(f (car p) (cdr p)))))

  (claim kar                  ; first eliminator for (Pair Nat Nat)
		 (-> (Pair Nat Nat)   ; (it will resemble car)
			 Nat))
  (define kar
	(lambda (p)
	  (elim-Pair
	   Nat Nat                ; the types of car and cdr which we will elim
	   Nat                    ; the output of the lambda below
	   p                      ; the actual argument
	   (lambda (a d)          ; will be used like this
		 a))))

  (claim kdr                  ; second eliminator for (Pair Nat Nat)
		 (-> (Pair Nat Nat    ; (it will resemble cdr)
				   Nat)))
  (define kdr
	(lambda (p)
	  (elim-Pair
	   Nat Nat
	   Nat
	   p
	   (lambda (a d)
		 d))))

  ;; swapping elements in a (Pair Nat Atom)
  (claim swap
		 (-> (Pair Nat Atom)
			 (Pair Atom Nat)))
  (define swap
	(lambda (p)
	  (elim-Pair
	   Nat Atom
	   (Pair Atom Nat)
	   p
	   (lambda (a d)
		 (cons d a)))))
#+END_SRC

** Product Types
In principle, the type for =elim-Pair= could be:
#+BEGIN_SRC racket
  ;; the general use of elim-Pair is
  (elim-Pair
   A D
   X
   p
   f)

  ;; so it's type could be something like
  (claim elim-Pair
		 (-> A D
			 X
			 (Pair A D)
			 (-> A D
				 X)
			 X)
#+END_SRC

The idea is that in the =claim= for =elim-Pair=, =A=, =D= and =X= must be
able to refer to whatever the arguments are. But at the same time, when we
=claim= an expression with type =(-> Y X)=, it is a /lambda-expression/,
which, given an =Y=, results in a =X=, where =X= and =Y= are types.
But also, =A, D, X= are neither type constructors, so it means that
the definition using functional types cannot work.

Hence, we need another type, which is the *product type*.

Here is a motivating example:
#+BEGIN_SRC racket :tangle ../rkt/product-flip.rkt :exports code
  ;; the following is a motivating example for the
  ;; use of product types, before introducing them formally.
  ;; see the notes for details

  #lang pie
  (claim flip
		 (Pi ((A U)
			  (D U))
			 (-> (Pair A D)
				 (Pair D A))))
  (define flip
	(lambda (A D)
	  (lambda (p)
		(cons (cdr p) (car p)))))
#+END_SRC

Basically, what we are getting using product types are functions that work
for arguments having any type, since the product type is /parametrized/
by the types.

Similarly, another example is to define a /diagonal/ function, i.e.
one which makes a pair with the same element. But it is now defined
using product types, hence it will work for arguments of any type.
#+BEGIN_SRC racket :tangle ../rkt/diagonal.rkt :exports code
  ;; we define a general purpose diagonal function,
  ;; i.e. one which makes a pair of the same argument.
  ;; it will be defined using product types, hence
  ;; it will work for arguments of any type.

  #lang pie

  (claim twin                     ; twin is
		 (Pi ((Y U))              ; parametrized by any type Y : U
			 (-> Y                ; and produces Y -> (Pair Y Y)
				 (Pair Y Y))))
  (define twin
	(lambda (Y)                   ; abstract the type
	  (lambda (x)                 ; abstract the argument
		(cons x x))))             ; use the Pair type constructor (`cons')

  ;; it can now be used in particular examples,
  ;; namely for particular types:
  (claim twin-Atom
		 (-> Atom
			 (Pair Atom Atom)))
  (define twin-Atom
	(twin Atom))
#+END_SRC

* 5: Lists, Lists, and More Lists
The constructors for lists are:
- =nil=, which makes an empty list;
- =::=, which is the equivalent of =cons= for pairs.
Also, the type constructor is =List=, so =(List E)= is a type.

As in the case of integers, the eliminator for lists is =rec-List=, as 
described below:
#+BEGIN_SRC racket
  (rec-List target
			base
			step)
  ;; in this case, rec-List is an X when:
  ;;      - target is a (List E)
  ;;      - base is an X
  ;;      - step is an (-> E (List E) X X)
#+END_SRC

** Example: Manipulating List Length
The following example defines functions to be used to increase
or decrease the length of a list.
#+BEGIN_SRC racket :tangle ../rkt/list-length.rkt :exports code
  ;; Defininig the length of a list,
  ;; using rec-List and dependent types.

  #lang pie

  ;; the length of a list
  (claim length
		 (Pi ((E U))
			 (-> (List E)
				 Nat)))
  (define length
	(lambda (E)
	  (lambda (es)
		(rec-List es
				  0
				  step-length E))))   ; we need the inductive step

  ;; inductive step for increasing length
  (claim step-length
		 (Pi ((E U))
			 (-> E (List E) Nat
				 Nat)))
  (define step-length
	(lambda (E)
	  (lambda (e es length-es)
		(add1 length-es))))

  ;; special version for Atoms
  (claim length-Atom
		 (-> (List Atom)
			 Nat))
  (define length-Atom
	(length Atom))
#+END_SRC

*Remark:* All the entries in a list must have the same type!

** Example: Appending to a List

#+BEGIN_SRC racket :tangle ../rkt/list-append.rkt :exports code
  ;; Definining the functions to append to a list,
  ;; using steps and induction, as well as dependent types.
  #lang pie

  (claim append
		 (Pi ((E U))
			 (-> (List E) (List E)
				 (List E))))
  (define append
	(lambda (E)
	  (lambda (start end)
		(rec-List start
				  end
				  (step-append E))))) ; we need the inductive step

  ;; the inductive step for appending to a list
  (claim step-append
		 (Pi ((E U))
			 (-> E (List E) (List E)
				 (List E))))
  (define step-append
	(lambda (E)
	  (lambda (e es append-es)
		(:: e append-es))))
#+END_SRC

** Example: Concatenating Two Lists

#+BEGIN_SRC racket :tangle ../rkt/list-concat.rkt :exports code
  ;; we define the concatenation of two lists
  ;; using induction and dependent types.
  #lang pie

  ;; we need the append defined previously
  (require list-append)

  ;; helper: a special cons,
  ;; that appends at the end of a list: snoc
  (claim snoc
		 (Pi ((E U))
			 (-> (List E) E
				 (List E))))
  (define snoc
	(lambda (E)
	  (lambda (start e)
		(rec-List start
				  (:: e nil)
				  (step-append E)))))

  ;; the inductive step
  (claim step-concat
		 (Pi ((E U))
			 (-> E (List E) (List E)
				 (List e))))
  (define step-concat
	(lambda (E)
	  (lambda (e es concat-es)
		(snoc E concat-es e))))

  ;; actual concatenation
  (claim concat
		 (Pi ((E U))
			 (-> (List E) (List E)
				 (List E))))
  (define concat
	(lambda (E)
	  (lambda (start end)
		(rec-List end
				  start
				  step-concat E))))
#+END_SRC

** Example: Reversing a List
#+BEGIN_SRC racket :tangle ../rkt/list-reverse.rkt :exports code
  ;; we define reversing a list using induction
  ;; and dependent types.
  #lang pie

  ;; we need snoc
  (require list-append)

  ;; reversing a list
  (claim reverse
		 (Pi ((E U))
			 (-> (List E)
				 (List E))))

  ;; the inductive step
  (claim step-reverse
		 (Pi ((E U))
			 (-> E (List E) (List E)
				 (List E))))

  (define step-reverse
	(lambda (E)
	  (lambda (e es reverse-es)
		(snoc E reverse-es e))))

  (define reverse
	(lambda (E)
	  (lambda (es)
		(rec-List es
				  (the (List E) nil)      ; nil
				  (step-Reverse E)))))
#+END_SRC

* 6: Precisely How Many?
We are building lists of specific length with the syntax
=(Vec E k)=. This builds a list of elements of type =E= of length =k=.
In general, =vec::= is the constructor for such lists and for the
particular case of =(Vec E zero)=, the constructor is =vecnil=.
That is, if =e= is an =E= and =es= is a =(Vec E k)=, then
=(vec:: e es)= is a =(Vec E (add1 k))=.

For such items, we can define functions that take the =head=,
=tail= or specific elements.

** Example: First of One
#+BEGIN_SRC racket :tangle ../rkt/first-of-one.rkt :exports code
  ;; this snippet takes the first element
  ;; from a list which contains only one (i.e. of type (Vec E 1))
  ;; then only two
  #lang pie

  ;; claim the type
  (claim first-of-one
		 (Pi ((E U))
			 (-> (Vec E 1)
				 E)))
  ;; define the function
  (define first-of-one
	(lambda (E)
	  (lambda (es)
		(head es))))          ; head is built in

  ;; test
  (first-of-one Atom
				(vec:: 'shiitake vecnil))     ; => 'shiitake

  ;; for lists of 2 elements
  ;; claim the type
  (claim first-of-two
		 (Pi ((E U))
			 (-> (Vec E 2)
				 E)))
  ;; define the function
  (define first-of-two
	(lambda (E)
	  (lambda (es)
		(head es))))

  ;; test
  (first-of-two Atom
				(vec:: 'matsutake
					   (vec:: 'morel
							  (vec:: 'truffle vecnil)))) ; => error
  (first-of-two Atom
				(vec:: 'hribi
					   (vec:: 'bureti vecnil)))          ; => 'hribi
#+END_SRC

** Example: Custom =first= and =rest=
#+BEGIN_SRC racket :tangle ../rkt/first-of-list.rkt :exports code
  ;; define a custom version of `first' and `rest' for a list

  #lang pie

  ;; claim the type of first
  (claim first
		 (Pi ((E U)
			  (l Nat))
			 (-> (Vec E (add1 l))
				 E)))
  ;; define it
  (define first
	(lambda (E l)
	  (lambda (es)
		(head es))))

  ;; test
  (first (vec:: 'one
				(vec:: 'two
					   (vec:: 'three vecnil))))       ; => one

  ;; claim the type of rest
  (claim rest
		 (Pi ((E U)
			  (l Nat))
			 (-> (Vec E (add1 l))
				 (Vec E l))))
  ;; define it
  (define rest
	(lambda (E l)
	  (lambda (es)
		(tail es))))

  ;; test
  (rest (vec:: 'one
			   (vec:: 'two
					  (vec:: 'three vecnil))))        ; => '(two three vecnil)
#+END_SRC

* 7: It All Depends on the Motive
