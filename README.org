#+TITLE: Racket (and) Semantics
#+AUTHOR: Adrian Manea

This is a repository for my learning of the [[https://racket-lang.org/][Racket]] programming language,
with a strong theoretical motivation and interest. Along the way, I will 
(hopefully) be touching on more related subjects such as Lisps, lambda 
calculus with types, semantics of (mostly) functional programming languages
and more.

*Update March 2020:* I've decided to focus the dissertation on Racket.
The applications I will be considering are crafting (elements of) proof
assistants to showcase (elements of) intuitionistic logic.

The [OLD] part was focusing on PLT Redex, which I've decided to skip.

* Main References
- [[https://docs.racket-lang.org/][Racket documentation]];
- [[https://htdp.org/][How to Design Programs]];
- [[https://www.youtube.com/watch?v=jimmGDcTx4Y][P. Ragde's Proust]] (video talk @ 7th Racket Con 2017);
  + [[https://arxiv.org/abs/1611.09473][arXiv article]]

* More References
- [[https://docs.racket-lang.org/pollen/][Pollen]] documentation (TODO: Write the thesis in it?);
- [[https://www.leafac.com/playing-the-game-with-plt-redex/#abstract][Peg Solitaire with PLT Redex]];
- [[https://web.mit.edu/alexmv/6.037/sicp.pdf][SICP]], 2nd Edition, MIT 1996;


* [OLD] References
- [[https://redex.racket-lang.org/][PLT Redex and SEwPR]] website;
  + [[https://redex.racket-lang.org/why-redex.html][Why PLT Redex]] (good overview);
  + [[https://homepages.inf.ed.ac.uk/gdp/publications/cbn_cbv_lambda.pdf][Call-by-Name, Call-by-Value and the Lambda-Calculus]] -- G. Plotkin, 1974 (important inspiration);
  + [[https://www2.ccs.neu.edu/racket/pubs/tcs92-fh.pdf][Revised Report on the Syntactic Theories of Sequential Control and State]] -- Felleisen, Hieb, 1991
(improves on Plotkin);
- (book) Felleisen, Findler - /Semantics Engineering with PLT Redex/, MIT 2009;
- [[https://docs.racket-lang.org/redex/index.html][Redex: Practical Semantics Engineering]] (manual section in the Racket documentation);
  + [[https://plt.eecs.northwestern.edu/snapshots/current/pdf-doc/redex.pdf][PDF version]];
- [[https://users.cs.northwestern.edu/~robby/lightweight-metatheory/][Run Your Research]] -- The 2012 POPL talk of Findler (including more resources);
- (article) [[http://www-formal.stanford.edu/jmc/basis.html][A Basis for a Mathematical Theory of Computation]] -- J. McCarthy, 1961;
- [[http://blog.ezyang.com/2014/01/ott-iff-plt-redex/][OTT <=> PLT Redex]], showing an alternative tool "for the working semanticist";
  + [[https://www.cl.cam.ac.uk/~pes20/ott/][OTT website @ Cambridge]];
- [[https://en.wikipedia.org/wiki/Operational_semantics#Reduction_semantics][Reduction Semantics]] @ Wikipedia;
- [[http://prl.ccs.neu.edu/blog/2017/09/25/plt-redex-faq/][PLT Redex FAQ]];
- [[https://htdp.org/2003-09-26/][How to Design Programs]] (1st edition), MIT 2003 (also the 2nd edition);
- [[https://github.com/ramalho/lc-with-redex][Lambda Calculus with Scheme and Redex]] (GitHub repo);
- [[https://williamjbowman.com/doc/experimenting-with-redex/index.html][Experimenting with Languages in Redex]] -- examples on how to use Redex for toy languages
(in Racket documentation);

